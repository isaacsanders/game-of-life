Elm.Input = Elm.Input || {};
Elm.Input.make = function (_elm) {
   "use strict";
   _elm.Input = _elm.Input || {};
   if (_elm.Input.values)
   return _elm.Input.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Input",
   $Basics = Elm.Basics.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $State = Elm.State.make(_elm),
   $Time = Elm.Time.make(_elm),
   $Window = Elm.Window.make(_elm);
   var toggleMailbox = $Signal.mailbox({ctor: "_Tuple3"
                                       ,_0: 0
                                       ,_1: 0
                                       ,_2: false});
   var toggleAddress = toggleMailbox.address;
   var Noop = {ctor: "Noop"};
   var Resize = function (a) {
      return {ctor: "Resize"
             ,_0: a};
   };
   var resizeSignal = A2($Signal.map,
   Resize,
   $Window.dimensions);
   var Tick = {ctor: "Tick"};
   var tickSignal = A2($Signal.map,
   $Basics.always(Tick),
   $Time.every(0.5 * $Time.second));
   var Toggle = function (a) {
      return {ctor: "Toggle"
             ,_0: a};
   };
   var toggleSignal = A2($Signal.map,
   Toggle,
   toggleMailbox.signal);
   var inputs = $Signal.mergeMany(_L.fromArray([toggleSignal
                                               ,tickSignal]));
   _elm.Input.values = {_op: _op
                       ,inputs: inputs
                       ,toggleAddress: toggleAddress
                       ,Toggle: Toggle
                       ,Tick: Tick
                       ,Resize: Resize
                       ,Noop: Noop};
   return _elm.Input.values;
};