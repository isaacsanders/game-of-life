Elm.State = Elm.State || {};
Elm.State.make = function (_elm) {
   "use strict";
   _elm.State = _elm.State || {};
   if (_elm.State.values)
   return _elm.State.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "State",
   $Basics = Elm.Basics.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Trampoline = Elm.Trampoline.make(_elm);
   var concatIndexedMap = F2(function (fn,
   list) {
      return $List.concatMap(fn)(A2($List.indexedMap,
      F2(function (v0,v1) {
         return {ctor: "_Tuple2"
                ,_0: v0
                ,_1: v1};
      }),
      list));
   });
   var cells = function (grid) {
      return A2(concatIndexedMap,
      function (_v0) {
         return function () {
            switch (_v0.ctor)
            {case "_Tuple2":
               return A2($List.indexedMap,
                 F2(function (x,cell) {
                    return {ctor: "_Tuple3"
                           ,_0: x
                           ,_1: _v0._0
                           ,_2: _U.eq(1,cell)};
                 }),
                 _v0._1);}
            _U.badCase($moduleName,
            "on line 90, column 19 to 66");
         }();
      },
      grid);
   };
   var transpose = function (grid) {
      return function () {
         var first = $List.head(grid);
         return function () {
            switch (first.ctor)
            {case "Just":
               return function () {
                    var n = $List.length(first._0);
                    var init = A2($List.repeat,
                    n,
                    _L.fromArray([]));
                    return A3($List.foldr,
                    $List.map2(F2(function (x,y) {
                       return A2($List._op["::"],
                       x,
                       y);
                    })),
                    init,
                    grid);
                 }();
               case "Nothing": return grid;}
            _U.badCase($moduleName,
            "between lines 74 and 81");
         }();
      }();
   };
   var rowsToHoods$ = F5(function (_v6,
   a,
   b,
   c,
   ns) {
      return function () {
         switch (_v6.ctor)
         {case "_Tuple3":
            return function () {
                 var _v11 = {ctor: "_Tuple3"
                            ,_0: a
                            ,_1: b
                            ,_2: c};
                 switch (_v11.ctor)
                 {case "_Tuple3":
                    switch (_v11._0.ctor)
                      {case "[]":
                         switch (_v11._1.ctor)
                           {case "[]":
                              switch (_v11._2.ctor)
                                {case "[]":
                                   return $Trampoline.Done(ns);}
                                break;}
                           return $Trampoline.Done(ns);}
                      switch (_v11._1.ctor)
                      {case "[]":
                         return $Trampoline.Done(ns);}
                      switch (_v11._2.ctor)
                      {case "[]":
                         return $Trampoline.Done(ns);}
                      switch (_v11._0.ctor)
                      {case "::":
                         switch (_v11._0._1.ctor)
                           {case "::":
                              switch (_v11._1.ctor)
                                {case "::":
                                   switch (_v11._1._1.ctor)
                                     {case "::":
                                        switch (_v11._2.ctor)
                                          {case "::":
                                             switch (_v11._2._1.ctor)
                                               {case "::": return function () {
                                                       var n = {ctor: "_Tuple3"
                                                               ,_0: {ctor: "_Tuple3"
                                                                    ,_0: _v6._0
                                                                    ,_1: _v11._0._0
                                                                    ,_2: _v11._0._1._0}
                                                               ,_1: {ctor: "_Tuple3"
                                                                    ,_0: _v6._1
                                                                    ,_1: _v11._1._0
                                                                    ,_2: _v11._1._1._0}
                                                               ,_2: {ctor: "_Tuple3"
                                                                    ,_0: _v6._2
                                                                    ,_1: _v11._2._0
                                                                    ,_2: _v11._2._1._0}};
                                                       return $Trampoline.Continue(function (_v31) {
                                                          return function () {
                                                             switch (_v31.ctor)
                                                             {case "_Tuple0":
                                                                return A5(rowsToHoods$,
                                                                  {ctor: "_Tuple3"
                                                                  ,_0: _v11._0._0
                                                                  ,_1: _v11._1._0
                                                                  ,_2: _v11._2._0},
                                                                  A2($List._op["::"],
                                                                  _v11._0._1._0,
                                                                  _v11._0._1._1),
                                                                  A2($List._op["::"],
                                                                  _v11._1._1._0,
                                                                  _v11._1._1._1),
                                                                  A2($List._op["::"],
                                                                  _v11._2._1._0,
                                                                  _v11._2._1._1),
                                                                  A2($List._op["::"],
                                                                  n,
                                                                  ns));}
                                                             _U.badCase($moduleName,
                                                             "on line 53, column 36 to 95");
                                                          }();
                                                       });
                                                    }();}
                                               break;}
                                          break;}
                                     break;}
                                break;
                              case "[]": switch (_v11._1.ctor)
                                {case "::":
                                   switch (_v11._1._1.ctor)
                                     {case "[]":
                                        switch (_v11._2.ctor)
                                          {case "::":
                                             switch (_v11._2._1.ctor)
                                               {case "[]": return function () {
                                                       var n = {ctor: "_Tuple3"
                                                               ,_0: {ctor: "_Tuple3"
                                                                    ,_0: _v6._0
                                                                    ,_1: _v11._0._0
                                                                    ,_2: 0}
                                                               ,_1: {ctor: "_Tuple3"
                                                                    ,_0: _v6._1
                                                                    ,_1: _v11._1._0
                                                                    ,_2: 0}
                                                               ,_2: {ctor: "_Tuple3"
                                                                    ,_0: _v6._2
                                                                    ,_1: _v11._2._0
                                                                    ,_2: 0}};
                                                       return $Trampoline.Done(A2($List._op["::"],
                                                       n,
                                                       ns));
                                                    }();}
                                               break;}
                                          break;}
                                     break;}
                                break;}
                           break;}
                      break;}
                 _U.badCase($moduleName,
                 "between lines 39 and 53");
              }();}
         _U.badCase($moduleName,
         "between lines 39 and 53");
      }();
   });
   var rowsToHoods = function (rows) {
      return $List.concat(A2($List.map,
      function ($) {
         return $List.reverse(function (_v33) {
            return function () {
               switch (_v33.ctor)
               {case "_Tuple3":
                  return $Trampoline.trampoline(A5(rowsToHoods$,
                    {ctor: "_Tuple3"
                    ,_0: 0
                    ,_1: 0
                    ,_2: 0},
                    _v33._0,
                    _v33._1,
                    _v33._2,
                    _L.fromArray([])));}
               _U.badCase($moduleName,
               "on line 35, column 67 to 112");
            }();
         }($));
      },
      rows));
   };
   var neighboringRows$ = F2(function (rows,
   list) {
      return function () {
         switch (list.ctor)
         {case "::":
            switch (list._1.ctor)
              {case "::":
                 switch (list._1._1.ctor)
                   {case "[]":
                      return $Trampoline.Done(A2($List._op["::"],
                        {ctor: "_Tuple3"
                        ,_0: list._0
                        ,_1: list._1._0
                        ,_2: A2($List.repeat,
                        $List.length(list._0),
                        0)},
                        rows));}
                   break;
                 case "[]":
                 return $Trampoline.Done(rows);}
              switch (list._0.ctor)
              {case "[]":
                 switch (list._1.ctor)
                   {case "::":
                      switch (list._1._1.ctor)
                        {case "::":
                           return $Trampoline.Continue(function (_v51) {
                                return function () {
                                   switch (_v51.ctor)
                                   {case "_Tuple0":
                                      return A2(neighboringRows$,
                                        A2($List._op["::"],
                                        {ctor: "_Tuple3"
                                        ,_0: A2($List.repeat,
                                        $List.length(list._1._0),
                                        0)
                                        ,_1: list._1._0
                                        ,_2: list._1._1._0},
                                        rows),
                                        A2($List._op["::"],
                                        list._1._0,
                                        A2($List._op["::"],
                                        list._1._1._0,
                                        list._1._1._1)));}
                                   _U.badCase($moduleName,
                                   "on line 31, column 48 to 126");
                                }();
                             });}
                        break;}
                   break;}
              switch (list._1.ctor)
              {case "::":
                 switch (list._1._1.ctor)
                   {case "::":
                      return $Trampoline.Continue(function (_v53) {
                           return function () {
                              switch (_v53.ctor)
                              {case "_Tuple0":
                                 return A2(neighboringRows$,
                                   A2($List._op["::"],
                                   {ctor: "_Tuple3"
                                   ,_0: list._0
                                   ,_1: list._1._0
                                   ,_2: list._1._1._0},
                                   rows),
                                   A2($List._op["::"],
                                   list._1._0,
                                   A2($List._op["::"],
                                   list._1._1._0,
                                   list._1._1._1)));}
                              _U.badCase($moduleName,
                              "on line 32, column 49 to 103");
                           }();
                        });}
                   break;}
              break;
            case "[]":
            return $Trampoline.Done(rows);}
         _U.badCase($moduleName,
         "between lines 27 and 32");
      }();
   });
   var neighboringRows = function (list) {
      return $List.reverse($Trampoline.trampoline(A2(neighboringRows$,
      _L.fromArray([]),
      A2($List._op["::"],
      _L.fromArray([]),
      list))));
   };
   var neighborhoods = function ($) {
      return rowsToHoods(neighboringRows($));
   };
   var GameOfLife = function (a) {
      return {ctor: "GameOfLife"
             ,_0: a};
   };
   var NewState = {ctor: "NewState"};
   _elm.State.values = {_op: _op
                       ,neighborhoods: neighborhoods
                       ,cells: cells
                       ,transpose: transpose
                       ,NewState: NewState
                       ,GameOfLife: GameOfLife};
   return _elm.State.values;
};